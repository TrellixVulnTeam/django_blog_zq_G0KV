"""
Django settings for myblog project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'aw0!#*lut9tv#a@zb(6lvoz@=ui=u4!9-@6+@9v9j4+ixaij3k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS=['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'password_reset',
    'article',
    'userprofile',
    'comment',
    'taggit',
    'ckeditor',
    'mptt',
    'notifications',
    'notice',
    'django.contrib.sites',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.weibo',

]
SITE_ID = 1
LOGIN_REDIRECT_URL = '/'
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myblog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myblog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
AUTHENTICATION_BACKENDS=(
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS=(
    os.path.join(BASE_DIR,'static'),
)

EMAIL_HOST='smtp.qq.com'
EMAIL_HOST_USER='1105319038@qq.com'
EMAIL_HOST_PASSWORD='wffysvcaqjxajejh'
EMAIL_PORT=25
EMAIL_USE_TLS=True
DEFAULT_FROM_EMAIL='xxx的博客 <1105319038@qq.com>'

#MEDIA_ROOT和MEDIA_URL是用户上传文件保存、访问的位置
MEDIA_URL='/media/'
MEDIA_ROOT=os.path.join(BASE_DIR,'media/')

CKEDITOR_CONFIGS={
    'default':{
        'width':'auto',
        'height':'250px',
        'tabSpaces':4,
        'toolbar':'Custom',
        'toolbar_Custom':[
            ['Smiley','CodeSnippet'],
            ['Bold','Italic','Underline','RemoveFormat','Blockquote'],
            ['TextColor','BGColor'],
            ['Link','Unlink'],
            ['NumberedList','BulletedList'],
            ['Maximize']
        ],
        'extraPlugins':','.join(['codesnippet','prism','widget','lineutils']),
    }
}

# LOGGING={
#     'version':1,
#     # 指明是否禁止默认配置的记录器
#     'disable_existing_loggers':False,
#     'handlers':{   #现在消息来到名叫file的handlers中了
#         'file':{   #
#             'level':'INFO',  #这个处理器定义了消息处理级别仍然为DEBUG
#             'class':'logging.FileHandler',  #在class中定义将消息输出到文件中去
#             'filename':os.path.join(BASE_DIR,'logs.debug.log'),#文件地址为项目目录的logs/debug.log。
#         },
#     },
# # 一条消息首先传递给logger。Django中内置了几种记录器，比如这里用到的Django记录器，
#     # 它会接收Django层次结构中的所有消息
#     'loggers':{
#         'django':{
#           'handlers':['file'],
#           'level':'INFO',  #我们定义了需要处理DEBUG以上级别的消息，并把这些消息传递给名叫file的处理器
#           'propagate':True,  #本记录器处理过的消息其他处理器也可以继续处理。
#         },
#     },
# }

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    #两个格式化器：
    'formatters': {
        #详细的格式化器，依次输出：消息级别、发生时间、抛出模块、进程ID、线程ID、提示信息
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        #简要的格式化器，仅输出消息级别和提示信息
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    #一个过滤器：
    'filters': {
        #使用此过滤器的消息仅在调试时才会生效
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        #三个处理器：
        #处理INFO以上级别消息，输出简要信息到命令行中；此处理器仅在调试模式生效
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        #处理ERROR以上级别消息，输出详细信息到Email中
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose',
        },
        #处理WARNING以上级别消息，输出详细信息到文件中
        'file': {
            'level': 'WARNING',
            # 'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/debug.log'),
            'formatter': 'verbose',

            'class':'logging.handlers.TimedRotatingFileHandler',
            'when':'midnight', #分割时间为凌晨
            'backupCount':30, #日志文件保存日期为30天
        },
    },
    'loggers': {
        #两个记录器：
        #将django产生的所有消息转交给console处理器
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
        #将网络请求相关消息转交给file、mail_admins这两个处理器。
        'django.request': {
            'handlers': ['file', 'mail_admins'],
            'level': 'WARNING',
            #此记录器处理过的消息就不再让django记录器再次处理了
            'propagate': False,
        },
    }
}

STATIC_ROOT=os.path.join(BASE_DIR,'collected_static')